version: 1.0.0

preamble: >
  @init_plot_env();
  const datadir       =   joinpath("data", "fill_cavity2");
  const nuv           =   0.2;
  const constit_rel_f =   init_constit_srt_bingham_implicit(nuv, 2.5e-5, 1e6, 1e-9, 10, 1e-5);
  const F             =   [0.0; -5.0e-6];
  const forcing_kf    =   init_sukop_gravity_Fk(F);
  const ni            =   128;
  const nj            =   32;
  const nsteps        =   100000;

# data directory
datadir:    {   value: datadir,       expr: true    }

# material properties
rho_0:      {   value: 1.0,           expr: false   }
nu:         {   value: nuv,            expr: true    }

# lattice parameters
dx:         {   value: 1.0,           expr: false   }
dt:         {   value: 1.0,           expr: false   }
ni:         {   value:  ni,           expr: true    }
nj:         {   value:  nj,           expr: true    }

# simulation parameters
simtype:    free_surface
col_f:      BGK_F(constit_rel_f, forcing_kf);
nsteps:     {   value: nsteps,        expr: true   }

obstacles:
  - type:   bounce_back
    coords: "[1 8 8 32]'" 

# boundary conditions
bcs:
  - south_bounce_back!
  - north_bounce_back!
  - (sim) -> mass_inlet!(sim, 1, 1:8, 1.0)
  - (sim) -> west_velocity!(sim.lat, 0.005, 1, 1, 8)
  - east_bounce_back!

# free surface conditions
rho_g: 1.0

fill_x: { value: 0.1,  expr: false }
fill_y: { value: 0.25, expr: false }

# callback functions
callbacks:
  - print_step_callback(50, "free-surf")
  - pycontour_callback(200, mass_acsr; fname=joinpath(datadir, "mass"), rects=[(8, 32, 1/ni, 8/ni)], levels=[-0.25; 0.0; 0.25; 0.5; 0.75; 1.0])
  - write_jld_file_callback(datadir, 5000)

# clean-up, backup, write out
finally:
  - >
    (sim::FreeSurfSim, k::Int) -> begin
      @assert(k == nsteps, "There was an error that ended the simulation early");
      for m in sim.tracker.M
        @assert(-100 < m < 100, "Mass was numerically unstable");
      end
      for u in sim.msm.u
        @assert(-100 < u < 100, "Velocity was numerically unstable");
      end
      for ρ in sim.msm.rho
        @assert(-100 < ρ < 100, "ρ was numerically unstable");
      end
      for f in sim.lat.f
        @assert(-100 < f < 100, "f was numerically unstable");
      end
      for ϵ in sim.tracker.eps
        @assert(-10 < ϵ < 10, "ϵ was numerically unstable");
      end
      print_with_color(:green, "TEST PASSED\n");
    end
  - pycontour_callback(1, mass_acsr; fname=joinpath(datadir, "mass"), rects=[(8, 32, 1/ni, 8/ni)], levels=[-0.25; 0.0; 0.25; 0.5; 0.75; 1.0])
  - write_jld_file_callback(datadir)

version: 1.0.0

# code to execute before parsing
preamble: >
  using DelimitedFiles;
  const id = "lid";
  const datadir = joinpath("data","ex-lid");
  mkpath(datadir);
  const ni  = 50;
  const nj  = 50;
  const U   = 0.001;
  const mu  = 0.25;
  const Re  = U * ni / mu;
  @info("Re = $Re");
  const constit_rel_f = init_constit_srt_const(mu);

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,       expr: false }
nu:       { value: mu,      expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
simtype:    default
nsteps:     { value: 50000,   expr: false }
col_f:      BGK(constit_rel_f)

# boundaries
sbounds:
  value: "transpose([1 ni 1 nj;])"
  expr: true

cbounds:
  value: "transpose([1 ni 1 nj;])"
  expr: true

# boundary conditions
bcs:
  - (sim) -> lid_driven!(sim.lat, U);
  - south_bounce_back!
  - east_bounce_back!
  - west_bounce_back!

# callback functions
callbacks:
  - print_step_callback(100, id)
  - write_jld_file_callback(datadir, 2000)
  - take_snapshot_callback(joinpath(datadir, "u_snaps.dsv"), 100, sample_u_uniform_sqr(5, 5, 40, 5))
  - take_snapshot_callback(joinpath(datadir, "v_snaps.dsv"), 100, sample_v_uniform_sqr(5, 5, 40, 5))

test_for_term:        is_steadystate
test_for_term_steps:  25

# clean-up, backup, write out
finally:
  - write_jld_file_callback(datadir)
  - pystream_callback(1, streamlines_acsr; showfig=false, fname=joinpath(datadir, "sl.png"), grid=true)
  - >
    (sim::Sim, k::Int) -> begin
      ni, nj = size(sim.msm.u, 2), size(sim.msm.u, 3);
      xs = range(0, 1.0; length=ni);
      ys = range(0, 1.0; length=nj);
      writedlm(joinpath(datadir, "u.dsv"), transpose(reshape(sim.msm.u[1,:,:], (ni, nj))), ",");
      writedlm(joinpath(datadir, "v.dsv"), transpose(reshape(sim.msm.u[2,:,:], (ni, nj))), ",");
      writedlm(joinpath(datadir, "u_midcav.dsv"), [vec(sim.msm.u[1,convert(Int, round(ni/2)),:]) ys], ",");
      writedlm(joinpath(datadir, "v_midcav.dsv"), [xs vec(sim.msm.u[2,:,convert(Int, round(nj/2))])], ",");
      PyPlot.clf();
      cs = PyPlot.contour(transpose(flow_Ïˆ(reshape(sim.msm.u[1,:,:], (ni, nj)), reshape(sim.msm.u[2,:,:], (ni, nj)))));
      #PyPlot.colorbar(cs);
      PyPlot.savefig(joinpath(datadir, "stream_function.png"));
    end

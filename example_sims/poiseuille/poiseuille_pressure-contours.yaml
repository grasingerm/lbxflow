version: 1.0.0

# code to execute before parsing
preamble: >
  @init_plot_env(); 
  using DelimitedFiles;
  const pgrad = -1e-3;
  const F = [-pgrad; 0.0];
  const constit_rel_f = init_constit_srt_const(1/6);
  const forcing_kf = init_sukop_Fk(F);
  const datadir = "data/sukop";
  const ni = 20;
  const nj = 12;

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,     expr: false }
nu:       { value: 1/6,     expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
nsteps:   { value: 10000,   expr: false }
col_f:    BGK_F(constit_rel_f, forcing_kf);

# boundaries
sbounds:
  value: "transpose([1 ni 1 nj;])"
  expr: true

cbounds:
  value: "transpose([1 ni 1 nj;])"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - periodic_east_to_west!

# callback functions
callbacks:
  - pycontour_callback(25, pressure_acsr; showfig=true, filled=true)
  - print_step_callback(25, "ex1")
  - write_jld_file_callback(datadir, 500)

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Real) -> begin
      writedlm(joinpath(datadir, "ux_profile.dsv"), 
      hcat(vel_prof_acsr(1, convert(Int64, round(ni/2)), 1:nj)(sim)...), 
        ",");
    end
  - write_jld_file_callback(datadir)

# test for conditions to end simulation
test_for_term: is_steadystate_x
